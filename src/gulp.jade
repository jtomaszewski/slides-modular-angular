doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Gulp - better grunt

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-okaidia.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section
        h1 Gulp
        h2.gray ... better grunt?
        .author
          | by 
          strong
            a(href="http://jtom.me") jacek@jtom.me

      section
        h2 A little bit of history
        h3 of front-end development

      section
        h2 
          | Years ago we had this
        pre.tolong
          code.language-markup.
            &lt;head&gt;
              &lt;script type="text/javascript" src="js/jquery-1.6.2.min.js"&gt;&lt;/script&gt;
              &lt;script type="text/javascript" src="js/jquery-ui-1.8.16.custom.min.js"&gt;&lt;/script&gt;
              &lt;script type="text/javascript" src="js/jquery.jplayer.min.js"&gt;&lt;/script&gt;
              &lt;script type="text/javascript" src="js/jquery.lightbox-0.5.js"&gt;&lt;/script&gt;
              &lt;script type="text/javascript" src="js/jquery.cycle.all.min.js"&gt;&lt;/script&gt;
              &lt;script type="text/javascript" src="js/jquery.mousewheel.js"&gt;&lt;/script&gt;
              &lt;script type="text/javascript" src="js/jquery.jscrollpane.min.js"&gt;&lt;/script&gt;
              &lt;script type="text/javascript" src="js/jquery.lightbox-0.5.js"&gt;&lt;/script&gt;

              &lt;link type="text/css" rel="stylesheet" href="css/style.css" /&gt;
              &lt;link type="text/css" rel="stylesheet" href="css/ui-lightness/jquery-ui-1.8.16.custom.css" /&gt; 
              &lt;link type="text/css" rel="stylesheet" href="css/jquery.lightbox-0.5.css" /&gt; 
            &lt;head/&gt;

      section.facepalm(data-bespoke-state='emphatic')

      section
        h2 Currently, we have this
        .logos
          a(href="https://github.com/bower/bower")
            img(src="images/bower.png", alt="Bower")

          a(href="http://gruntjs.com/") 
            img(src="images/grunt-logo.png", alt="Grunt")

          a(href="http://yeoman.io/") 
            img(src="images/yeoman-logo.a053.png", alt="Yeoman")

      section
        h2 So, it's like this
        pre
          code.
            $ bower install --save angular
            $ bower install --save angular-resource


          code.language-javascript.
            // gruntfile.js
            grunt.initConfig({
              concat: {
                dist: {
                  src: [
                    'vendor/bower/angular/angular.js', 
                    'vendor/bower/angular-resource/angular-resource.js'
                  ],
                  dest: 'dist/js/vendor.js'
                }
              }
            });

      section
        h2 and also like this
        ul
          li minify js, css, http files
          li compile other syntaxes (coffeescript, sass, jade, stylus, etc.)
          li watch files for changes
          li add license info
          li compile HTML templates into JS
          li use sourcemaps
          li hint for errors
          li compress images

      section
        h2 or even like this
        ul
          li run tests
          li deploy to server
          li move/create somes files, directories, symlinks
          li run a HTTP server

      section
        h2 This was fine.
        h3 But brought as to ..

      section.spaghetti
        .bullet
        .bullet
          h2 this.

          pre.language-javascript.toolong(data-src="examples/lineman_gruntfile.js")

      section
        h2.smaller Grunt is fine for basic applications
        h3.smaller but not for everything.
        ul
          li 
            span.con Grunt config file is divided by plugins 
            span.pro (not modules / features)

          li 
            span.con Generates a lot of tmp files, 
            span.pro which shouldn't be written to disc anyway and could be handled in memory
            .example 
              | compile .coffee files, concat into main.js, ngMinify, uglify, add license banner
              br
              |  = 4 tasks, 2 sets of temporary files

          li
            span.con A lot of plugins, 
            span.pro which configuration is often limited and often shouldn't even be a plugin

      section
        h3 What if we could write tasks as stream-based commands on unix?
        pre.small.language-
          code.
            $ find src -name '*.coffee' | coffee | ng-minify | uglify --sourcemaps=true | concat > dist/js/main.js

      section(data-bespoke-state='emphatic')
        a(href="http://gulpjs.com/") 
          img.logo(src="images/gulp-2x.png", alt="GulpJS")

      section
        h2 Gulp
        h3 Code over configuration
        ul
          li Manually write your tasks, using a stream or promise
          li Gulp will take care of your tasks dependencies itself
          li Tasks are run concurrently

      section
        h2 
          | Task example 
          a.gray(href="http://markgoodyear.com/2014/01/getting-started-with-gulp/") (source)
        pre.language-javascript
          code.
            gulp.task('scripts', function() {
              return gulp.src('src/scripts/**/*.js') // <-- Read from FS
              
                // In memory transforms:
                .pipe(jshint('.jshintrc'))
                .pipe(jshint.reporter('default'))
                .pipe(concat('main.js'))
                .pipe(gulp.dest('dist/assets/js')) // <-- Write to FS
                .pipe(rename({suffix: '.min'}))
                .pipe(uglify())
                .pipe(gulp.dest('dist/assets/js')) // <-- Write to FS
                .pipe(livereload(server))
                .pipe(notify({ message: 'Scripts task complete' }));
            });

      section
        h2.bullet Gulp consists only of four functions
        ul.bullets
          li 
            code gulp.src(glob)
            span.desc - create a stream from given file system glob.
          li 
            code gulp.dest(folder)
            span.desc - save files from a stream to given directory.
          li 
            code gulp.task(name, [deps,], fn)
            span.desc - define a task with optional dependencies.
          li 
            code gulp.watch(glob, [tasks])
            span.desc - run a task when one of the globbed files is changed.

        p.bullet.pink
          strong That's it!

      section
        h2 Live demo
        a(href="https://github.com/jtomaszewski/ionic-angular-cordova-gulp-seed/tree/78cd4498d297381db4650fc3600b918c432a95a1") jtomaszewski/ionic-angular-cordova-gulp-seed

      section
        h2 So why it's better than Grunt?
        p As the gulpjs.com says:
        ul.nostyle
          li
            strong.white Speed
            |  - tasks run concurrently
          li
            strong.white Efficiency
            |  - no unnecessary temporary files
          li
            strong.white Simplicity
            |  - Gulpfile is much cleaner


      section
        h2 Watch out
        ul.bullets
          li
            strong It's still under heavy development.
            br
            | Some basic issues are yet to be resolved (
            a(href="https://github.com/wearefractal/gulp-coffee/issues/14") sourcemaps
            | , 
            a(href="https://github.com/gulpjs/gulp/issues/259") watch
            | ).
          li 
            | However, 
            strong Gulp 4
            |  will resolve them completely (and change syntax a little).
            br
            small 
              | More info 
              a(href="https://github.com/gulpjs/gulp/issues/347") here
              |  and 
              a(href="https://github.com/gulpjs/gulp/issues/355") here
              | .
          li
            strong Still, worth a try in your next project.


      section
        h2 Gulp-Links
        .align-left
          h4 Other slideshows
          ul
            li
              a(href="http://markdalgleish.github.io/presentation-build-wars-gulp-vs-grunt/#1") Build Wars: Gulp vs Grunt
            li
              a(href="http://murphyrandle.github.io/AGulpOfGulp/#/") A gulp of Gulp
            li
              a(href="http://slides.com/contra/gulp") Gulp - the streaming build system
          br
          h4 Blog posts
          ul
            li
              a(href="http://www.100percentjs.com/just-like-grunt-gulp-browserify-now/") And just like that Grunt and RequireJS are out, itâ€™s all about Gulp and Browserify now
            li
              a(href="http://markgoodyear.com/2014/01/getting-started-with-gulp/") Getting started with Gulp
            li
              a(href="http://jmperezperez.com/gulp-js/") Gulp.js, an alternative to Grunt.js


      section
        h2 Thank you!

        h3.bullet Questions?

        .author.footer
          | by 
          strong
            a(href="http://jtom.me") jacek@jtom.me

      //- section(data-bespoke-state='emphatic')
      //-   h2 Emphatic Slide!
      //-   h3 Powered by <a href="https://github.com/markdalgleish/bespoke-state">bespoke-state</a>

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-convenient/dist/bespoke-convenient.min.js')
    script(src='bower_components/bespoke-indexfinger/dist/bespoke-indexfinger.min.js')
    script(src='bower_components/bespoke-secondary/dist/bespoke-secondary.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
    // endbuild
